; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

# ------------------------------------------------------------------------------
# Global PlatformIO project settings
# ------------------------------------------------------------------------------
[platformio]
# CI/Release binaries
;default_envs = esp32dev, nodemcu-32s

# Debug binaries
;default_envs = esp32dev_debug, nodemcu-32s_debug

# Build everything
;default_envs = esp32dev, esp32dev_debug, nodemcu-32s, nodemcu-32s_debug

# Single binaries (uncomment your board)
;default_envs = esp32dev
;default_envs = esp32dev_debug
;default_envs = nodemcu-32s
default_envs = nodemcu-32s_debug

# Use a shared cache directory to enable multiple projects to reuse build artefacts and reduce compilation times
build_cache_dir = ~/.platformio/buildcache              ; This folder is located in the user's home directory
# Include additional configuration options
extra_configs   = platformio_override.ini               ; Load extra configuration from the specified file


# ------------------------------------------------------------------------------
# Common settings
# ------------------------------------------------------------------------------
[common]
# Official espressif32 platform
platform_default    = espressif32
# Custom espressif32 platform (with patched Arduino core)
platform_pioarduino = https://github.com/pioarduino/platform-espressif32/releases/download/55.03.32/platform-espressif32.zip

# Partition tables
partitions_default = default.csv                        ; Default partition table
partitions_min     = min_spiffs.csv                     ; Minimal SPIFFS partition table (used e.g. for OTA updates)
partitions_large   = large_spiffs.csv                   ; Large SPIFFS partition table (more space for file storage, less for app)


# ------------------------------------------------------------------------------
# Base enviroment
# ------------------------------------------------------------------------------
[env]
# Platform options
platform  = ${common.platform_default}                  ; Use official espressif32 platform by default
framework = arduino                                     ; Use Arduino framework
board_build.flash_mode = dout                           ; Set default flash mode to DOUT, most compatible to various boards
board_build.partitions = ${common.partitions_default}   ; Use default partition table

# Monitor options
monitor_speed = 115200                                  ; Monitor baud rate for serial output

# Upload options
;upload_speed = 115200                                  ; Slow upload speed but most compatible
upload_speed = 921600                                   ; Fast upload speed

# Monitor options
monitor_filters = esp32_exception_decoder               ; Decode ESP32 exceptions using the built-in filter

# Custom build options
custom_build_flags_async_tcp_lib =
    ; Optimize AsyncTCP library settings
    ;     use recommended configuration for AsyncTCP library
    ;     from the https://github.com/ESP32Async/ESPAsyncWebServer site
    -D CONFIG_ASYNC_TCP_MAX_ACK_TIME=5000               ; Keep default ACK timeout
    -D CONFIG_ASYNC_TCP_PRIORITY=10                     ; Keep default task priority
    -D CONFIG_ASYNC_TCP_QUEUE_SIZE=64                   ; Keep default queue size
    -D CONFIG_ASYNC_TCP_RUNNING_CORE=1                  ; Force async_tcp task to be on same core as Arduino app (default is any core)
    -D CONFIG_ASYNC_TCP_STACK_SIZE=4096                 ; Reduce the stack size (default is 16kB)

# Build options
build_flags =
    ${env.custom_build_flags_async_tcp_lib}             ; Include AsyncTCP library optimizations
    -std=gnu++17                                        ; Use C++17 standard + GNU extensions
;    -Wall                                              ; Enable all warnings
;    -w                                                 ; Suppress all warnings

build_unflags =
    -std=gnu++11                                        ; Remove default C++11 standard

# Library options
lib_deps =
    FastLED/FastLED@3.10.2
    https://github.com/hocki7z/ESPNtpClient#0.2.8
    https://github.com/hocki7z/FreeRTOScpp.git#1.0.1
    ;
    bblanchon/ArduinoJson@7.4.1
    ESP32Async/AsyncTCP@3.4.9
    ESP32Async/ESPAsyncWebServer@3.8.1
    https://github.com/hocki7z/ESPUI#2.2.7

lib_ignore =
    LittleFS_esp32                                      ; Force the use of the ESP32 built-in version

lib_compat_mode = strict                                ; Enable strict library compatibility mode


# ------------------------------------------------------------------------------
# NodeMCU-32S
# ------------------------------------------------------------------------------
[env:nodemcu-32s]
# NodeMCU-32S board
board = nodemcu-32s
board_build.flash_mode = qio                            ; Set flash mode to QIO, faster than DOUT
board_build.partitions = ${common.partitions_min}       ; Use minimal SPIFFS partition table (more space for app)

# Build options
build_type = release

build_flags =
    ${env.build_flags}
    -D CORE_DEBUG_LEVEL=0                               ; No debug output (default)
    -D USE_LOGGING=false                                ; Disable logging functionality


# ------------------------------------------------------------------------------
# NodeMCU-32S [DEBUG]
# ------------------------------------------------------------------------------
[env:nodemcu-32s_debug]
# NodeMCU-32S board
board = nodemcu-32s
board_build.flash_mode = qio                            ; Set flash mode to QIO, faster than DOUT
board_build.partitions = ${common.partitions_min}       ; Use minimal SPIFFS partition table (more space for app)

# Build options
build_type = debug

build_flags =
    ${env.build_flags}
    -D CORE_DEBUG_LEVEL=3                               ; Info, warnings, and errors
;    -D CORE_DEBUG_LEVEL=4                               ; Verbose debug output (most detailed); Neends more flash memory!
    -D USE_LOGGING=true                                 ; Enable logging functionality

